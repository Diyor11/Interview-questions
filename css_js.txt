Css --------------

1 Css da box model nima ?
Javob: width kengligi, height balandlig, border contentni o'rabturivchi chiziq, padding contentdan bordorgacha bo'lgan bo'shliq, margin bordan tashqaridagi bo'shliq

2 Css da visibilaty: hidden va display: none nima farqi bor ?
Javob: visibilaty: hidden elementni ko'zga ko'rinmaydigan qip qo'yadi lekin u pageda o'zini joyini egallab turadi, display: none bu elementni butkul olip tashlaydi u egallab turgan joy ham yolqoladi

3. Css da positionlarni aytipp bering ?
Fixed
Static
Relative
Absolute
Sticky

3 Flexbox va Grid ni aytip bering ularning avzalliklari nimada ?

JS --------------
1 Js da oz'garuvchi qanday yo'llar bilan elon qilinadi ?
Javob: let, var, const

2 let, var, const varlari nimada ?
let va const ni scopi uni o'rab turgan funksiya bilan chegaralandi

function Work() {
  let first = 1;
  const second = 2;
  var thirt = 3;
}

console.log(first) // undfined
console.log(second) // undfined
console.log(thirt) // 3

3 Js da hoisting nima ?
Javob: hoisting bu o'zgaruvchi elon qilinishidan oldin ishlatilishi
id = 3; // syntacsis error
let id = 1;

4 let, var, const qaysilarida hoisting bor ?
Javob: uchchalasida ham

5 undefined va not defined ni farqi nimada qachon ular paydo bo'ladi ?

let arr;
console.log(arr) // undefined
console.log(anyArr) // not defined

6 Promise nima uning nechta holati bor ?
Javob: promise costructor funksiya u async amallarni bajarishga ishlatiladi uni new kalid so'zi bilan ishlatiladi u callback funksiya qabul qiladi u funksiyaga ikkita parametr beriladi (resolve, reject) agar relove chaqirilsa unda funksiya success ishladi reject bo'lsa xato otadi. Uni uchta xolati bor pending, fullfilled, rejected

const promise = new Promise((resolve, reject) => {
  relove() // success then bloki ishlaydi
  reject() // catch blocki ishlaydi
});

promise
  .then((value) => {
    console.log("Promise fulfilled with value:", value);
  })
  .catch((error) => {
    console.log("Promise rejected with error:", error);
  });

7 Promise all nima ?
Javob: Promise.all([promise, promise2]) u promislardan iborat array qabul qiladi agar bittasi reject bo'lsa shu zaxoti Promise reject bo'lib xato otadi agar hammasi resolve bo'lsa natija succes va array qaytadi 

const promise1 = new Promise((resolve) => setTimeout(() => resolve("Promise 1"), 2000));
const promise2 = new Promise((resolve) => setTimeout(() => resolve("Promise 2"), 1000));

Promise.all([promise1, promise2])
  .then((values) => {
    console.log("All promises fulfilled:", values); 
  })
  .catch((error) => {
    console.log("At least one promise rejected:", error);
  });



8 Js da qaynday funksiyalar bor ?
Function Declaration:

function functionName(parameter1, parameter2) {
  // Function body
  // Code to be executed
}

Function Expression:

var variableName = function(parameter1, parameter2) {
  // Function body
  // Code to be executed
};

Arrow Function Expression:
var functionName = (parameter1, parameter2) => {
  // Function body
  // Code to be executed
};

9 Js da === va == farqi nimada ?
let first = 1
let second = "1"

first == second // true
first === second // false

10 JS da qanday data tyles bor va Primitive va non primitive datlarning sanab bering ularning farqlari nimada ?

primitive: string, number, boolean, null, undefined
non-primitive: object, array

primitive data tylarda o'zgaruvchi elon qilinganda xotiradan unga joy ajratiladi agar boshqa o'zgaruvchi  unga tenglashtirip qo'yilsa u o'sha o'zgaruvchidan clone oladi.

let num = 1
let num2 = num;
num2 = 2;

console.log(num) // 1
console.log(num2) // 2

non-primitive o'garuvchi elon qilinsa unga xotida joy ajratiladi agar boshqa o'zgaruvchi unga telnglashtirilsa  bu o'zgaruvchi asosiy o'zgaruvchining xotiradagi joyiga qarab qoladi yani ikkasi o'zgaruvchiga aylaanadi.
let obj = {id: 1}
let obj2 = obj;
obj2 = {id: 2};

console.log(obj) // {id: 2}
console.log(obj2) // {id: 2}

11 spread va rest operatorlari farqi nimada ?

rest bu object yoki arrayni desctructure qilganda ishlatiladi, u doim oxirida bo'lishi kerak

let obb = {id, 1, name: "name", age: 20}
let {id, ...rest} = obb

console.log(id) // 1
console.log(rest) // {name: "name", age: 20}

let {...rest, id} = obb // synaksis error beradisababi rest oberatori oxirida ishlatilishi kerak

spread oprator obyekt yo arryani valyularini clone qilip oladi 
let arr = [1,2,3]

console.log(...arr) // 1,2,3
console.log([...arr]) // [1,2,3]

12. map(), forEach() farqlarini tushuntirip bering ?

13, reduce methodi nima u qanday ihslaydi ?
const numbers = [1, 2, 3, 4, 5];

const sum = numbers.reduce((accumulator, currentValue) => {
  accumulator += currentValue
  return accumulator
}, 0); // 0 bu accumulator ning boshlang'ich qiymati
console.log(sum); // Output: 15
